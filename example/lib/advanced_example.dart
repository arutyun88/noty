import 'package:flutter/material.dart';
import 'package:noty/noty.dart';

/// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ Noty.
///
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
/// - –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
/// - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
/// - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
/// - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
/// - –ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
/// - –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
/// - –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ –º–∏–∫—Å–∏–Ω—ã
///
/// ---
///
/// Advanced example of Noty package usage.
///
/// Demonstrates all main features:
/// - Different message types
/// - Priority configuration
/// - Interactive actions
/// - Message grouping
/// - Adapters for external systems
/// - Different screen positions
/// - Utility methods and mixins
class AdvancedExampleApp extends StatelessWidget {
  const AdvancedExampleApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Noty Advanced Example',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const ExampleHomePage(),
    );
  }
}

class ExampleHomePage extends StatefulWidget {
  const ExampleHomePage({super.key});

  @override
  State<ExampleHomePage> createState() => _ExampleHomePageState();
}

class _ExampleHomePageState extends State<ExampleHomePage> with SnackbarMixin {
  /// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–Ω—ç–∫–±–∞—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
  /// Controller for managing snackbar messages.
  late final SnackbarController _controller;

  /// –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—Ç–µ–∫–∞ —Å–Ω—ç–∫–±–∞—Ä–æ–≤.
  /// Current snackbar stack position.
  StackAlignment _stackAlignment = StackAlignment.topRight;

  /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
  /// Maximum number of visible messages.
  int _maxVisibleMessages = 5;

  /// –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —Å–æ–æ–±—â–µ–Ω–∏–π.
  /// Counter for generating unique message IDs.
  int _messageCounter = 0;

  @override
  void initState() {
    super.initState();
    _controller = SnackbarController();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
  /// Generates unique ID for message.
  String _generateMessageId() => 'msg_${++_messageCounter}';

  @override
  Widget build(BuildContext context) {
    return SnackbarOverlay(
      controller: _controller,
      alignment: _stackAlignment,
      maxVisibleMessages: _maxVisibleMessages,
      adapters: [
        // –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏
        // Network monitoring adapter
        const NetworkSnackbarAdapter(),
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        // Custom adapter for demonstration
        CustomSnackbarAdapter(
          id: 'demo_adapter',
          initialize: (controller) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            // Show welcome message after 2 seconds
            Future.delayed(const Duration(seconds: 2), () {
              controller.showSnackbar(
                BasicSnackbarMessage(
                  id: 'welcome',
                  message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Noty! üéâ',
                  type: SnackbarType.info,
                  priority: SnackbarPriority.high,
                  actions: [
                    SnackbarAction(
                      label: '–°–ø–∞—Å–∏–±–æ',
                      onPressed: () {
                        debugPrint('Welcome acknowledged');
                      },
                    ),
                  ],
                ),
              );
            });
          },
        ),
      ],
      child: Scaffold(
        appBar: AppBar(
          backgroundColor: Theme.of(context).colorScheme.inversePrimary,
          title: const Text('Noty Advanced Example'),
          actions: [
            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            // Button to clear all messages
            IconButton(
              icon: const Icon(Icons.clear_all),
              onPressed: () => clearAllSnackbars(_controller),
              tooltip: '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
            ),
          ],
        ),
        body: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏ –ª–∏–º–∏—Ç–æ–≤
              // Position and limits settings
              _buildSettingsSection(),
              
              const SizedBox(height: 24),
              
              // –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
              // Basic message types
              _buildBasicMessagesSection(),
              
              const SizedBox(height: 24),
              
              // –°–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
              // Priority messages
              _buildPriorityMessagesSection(),
              
              const SizedBox(height: 24),
              
              // –°–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
              // Messages with actions
              _buildActionMessagesSection(),
              
              const SizedBox(height: 24),
              
              // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
              // Grouped messages
              _buildGroupedMessagesSection(),
              
              const SizedBox(height: 24),
              
              // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
              // Special scenarios
              _buildSpecialScenariosSection(),
            ],
          ),
        ),
      ),
    );
  }

  /// –°—Ç—Ä–æ–∏—Ç —Å–µ–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
  /// Builds settings section.
  Widget _buildSettingsSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ / Settings',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 16),
            
            // –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–µ–∫–∞
            // Stack position selection
            Text('–ü–æ–∑–∏—Ü–∏—è —Å—Ç–µ–∫–∞ / Stack Position:'),
            const SizedBox(height: 8),
            Wrap(
              spacing: 8,
              children: StackAlignment.values.map((alignment) {
                return ChoiceChip(
                  label: Text(_getAlignmentLabel(alignment)),
                  selected: _stackAlignment == alignment,
                  onSelected: (selected) {
                    if (selected) {
                      setState(() {
                        _stackAlignment = alignment;
                      });
                    }
                  },
                );
              }).toList(),
            ),
            
            const SizedBox(height: 16),
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            // Maximum messages configuration
            Text('–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π / Max Messages: $_maxVisibleMessages'),
            Slider(
              value: _maxVisibleMessages.toDouble(),
              min: 1,
              max: 10,
              divisions: 9,
              onChanged: (value) {
                setState(() {
                  _maxVisibleMessages = value.round();
                });
              },
            ),
          ],
        ),
      ),
    );
  }

  /// –°—Ç—Ä–æ–∏—Ç —Å–µ–∫—Ü–∏—é –±–∞–∑–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
  /// Builds basic messages section.
  Widget _buildBasicMessagesSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã / Basic Types',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 16),
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: [
                ElevatedButton.icon(
                  icon: const Icon(Icons.info),
                  label: const Text('Info'),
                  onPressed: () => showInfo(_controller, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
                ),
                ElevatedButton.icon(
                  icon: const Icon(Icons.check_circle),
                  label: const Text('Success'),
                  onPressed: () => showSuccess(_controller, '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'),
                ),
                ElevatedButton.icon(
                  icon: const Icon(Icons.warning),
                  label: const Text('Warning'),
                  onPressed: () => showWarning(_controller, '–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ'),
                ),
                ElevatedButton.icon(
                  icon: const Icon(Icons.error),
                  label: const Text('Error'),
                  onPressed: () => showError(_controller, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏'),
                ),
                ElevatedButton.icon(
                  icon: const Icon(Icons.refresh),
                  label: const Text('Loading'),
                  onPressed: () {
                    final id = _generateMessageId();
                    showLoading(_controller, '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...', id: id);
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    // Auto-hide after 3 seconds
                    Future.delayed(const Duration(seconds: 3), () {
                      hideLoading(_controller, id: id);
                    });
                  },
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  /// –°—Ç—Ä–æ–∏—Ç —Å–µ–∫—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.
  /// Builds priority messages section.
  Widget _buildPriorityMessagesSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã / Priorities',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 16),
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: [
                ElevatedButton(
                  onPressed: () => _controller.showSnackbar(
                    BasicSnackbarMessage(
                      id: _generateMessageId(),
                      message: '–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                      type: SnackbarType.info,
                      priority: SnackbarPriority.low,
                    ),
                  ),
                  child: const Text('Low Priority'),
                ),
                ElevatedButton(
                  onPressed: () => _controller.showSnackbar(
                    BasicSnackbarMessage(
                      id: _generateMessageId(),
                      message: '–û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                      type: SnackbarType.info,
                      priority: SnackbarPriority.normal,
                    ),
                  ),
                  child: const Text('Normal Priority'),
                ),
                ElevatedButton(
                  onPressed: () => _controller.showSnackbar(
                    BasicSnackbarMessage(
                      id: _generateMessageId(),
                      message: '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –≤–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                      type: SnackbarType.warning,
                      priority: SnackbarPriority.high,
                    ),
                  ),
                  child: const Text('High Priority'),
                ),
                ElevatedButton(
                  onPressed: () => _controller.showSnackbar(
                    BasicSnackbarMessage(
                      id: _generateMessageId(),
                      message: 'üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ - —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!',
                      type: SnackbarType.error,
                      priority: SnackbarPriority.critical,
                      persistent: true,
                    ),
                  ),
                  child: const Text('Critical Priority'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  /// –°—Ç—Ä–æ–∏—Ç —Å–µ–∫—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏.
  /// Builds action messages section.
  Widget _buildActionMessagesSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è / Interactive Actions',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 16),
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: [
                ElevatedButton(
                  onPressed: () => _controller.showSnackbar(
                    BasicSnackbarMessage(
                      id: _generateMessageId(),
                      message: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.',
                      type: SnackbarType.error,
                      actions: [
                        SnackbarAction(
                          label: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
                          onPressed: () {
                            showSuccess(_controller, '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...');
                          },
                        ),
                        SnackbarAction(
                          label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                          onPressed: () {
                            showInfo(_controller, '–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏');
                          },
                          textColor: Colors.yellow,
                        ),
                      ],
                    ),
                  ),
                  child: const Text('Network Error'),
                ),
                ElevatedButton(
                  onPressed: () => _controller.showSnackbar(
                    BasicSnackbarMessage(
                      id: _generateMessageId(),
                      message: '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ –≤–µ—Ä—Å–∏–∏ 2.0',
                      type: SnackbarType.info,
                      persistent: true,
                      actions: [
                        SnackbarAction(
                          label: '–û–±–Ω–æ–≤–∏—Ç—å',
                          onPressed: () {
                            showLoading(_controller, '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...', id: 'update_download');
                            Future.delayed(const Duration(seconds: 2), () {
                              hideLoading(_controller, id: 'update_download');
                              showSuccess(_controller, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
                            });
                          },
                        ),
                        SnackbarAction(
                          label: '–ü–æ–∑–∂–µ',
                          onPressed: () {
                            showInfo(_controller, '–ù–∞–ø–æ–º–Ω–∏–º –ø–æ–∑–∂–µ');
                          },
                        ),
                      ],
                    ),
                  ),
                  child: const Text('App Update'),
                ),
                ElevatedButton(
                  onPressed: () => _controller.showSnackbar(
                    BasicSnackbarMessage(
                      id: _generateMessageId(),
                      message: '–§–∞–π–ª "document.pdf" –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ',
                      type: SnackbarType.success,
                      actions: [
                        SnackbarAction(
                          label: '–°–∫–∞—á–∞—Ç—å',
                          onPressed: () {
                            showSuccess(_controller, '–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞');
                          },
                        ),
                        SnackbarAction(
                          label: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
                          onPressed: () {
                            showInfo(_controller, '–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"');
                          },
                        ),
                        SnackbarAction(
                          label: '–ü—Ä–æ—Å–º–æ—Ç—Ä',
                          onPressed: () {
                            showInfo(_controller, '–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
                          },
                        ),
                      ],
                    ),
                  ),
                  child: const Text('File Ready'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  /// –°—Ç—Ä–æ–∏—Ç —Å–µ–∫—Ü–∏—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
  /// Builds grouped messages section.
  Widget _buildGroupedMessagesSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è / Grouped Messages',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 16),
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: [
                ElevatedButton(
                  onPressed: () => _showSyncMessages(),
                  child: const Text('Sync Messages'),
                ),
                ElevatedButton(
                  onPressed: () => _showDownloadMessages(),
                  child: const Text('Download Messages'),
                ),
                ElevatedButton(
                  onPressed: () => _showNotificationMessages(),
                  child: const Text('Notification Messages'),
                ),
                ElevatedButton(
                  onPressed: () => _controller.hideGroup('sync'),
                  child: const Text('Hide Sync Group'),
                ),
                ElevatedButton(
                  onPressed: () => _controller.hideGroup('downloads'),
                  child: const Text('Hide Download Group'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  /// –°—Ç—Ä–æ–∏—Ç —Å–µ–∫—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
  /// Builds special scenarios section.
  Widget _buildSpecialScenariosSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ / Special Scenarios',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 16),
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: [
                ElevatedButton(
                  onPressed: () => _showMessageFlood(),
                  child: const Text('Message Flood'),
                ),
                ElevatedButton(
                  onPressed: () => _showProgressSequence(),
                  child: const Text('Progress Sequence'),
                ),
                ElevatedButton(
                  onPressed: () => _showCustomStyledMessage(),
                  child: const Text('Custom Styled'),
                ),
                ElevatedButton(
                  onPressed: () => _showLongMessage(),
                  child: const Text('Long Message'),
                ),
                ElevatedButton(
                  onPressed: () => _testSpamPrevention(),
                  child: const Text('Test Spam Prevention'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
  /// Shows sync messages.
  void _showSyncMessages() {
    _controller.showMultiple([
      BasicSnackbarMessage(
        id: 'sync_start',
        message: '–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...',
        type: SnackbarType.loading,
        groupId: 'sync',
      ),
      BasicSnackbarMessage(
        id: 'sync_contacts',
        message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (1/3)',
        type: SnackbarType.info,
        groupId: 'sync',
      ),
      BasicSnackbarMessage(
        id: 'sync_photos',
        message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (2/3)',
        type: SnackbarType.info,
        groupId: 'sync',
      ),
    ]);

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    // Simulate sync completion
    Future.delayed(const Duration(seconds: 3), () {
      _controller.updateMessage(
        'sync_start',
        BasicSnackbarMessage(
          id: 'sync_complete',
          message: '‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
          type: SnackbarType.success,
          groupId: 'sync',
        ),
      );
    });
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏.
  /// Shows download messages.
  void _showDownloadMessages() {
    final files = ['photo1.jpg', 'document.pdf', 'video.mp4'];
    
    for (int i = 0; i < files.length; i++) {
      Future.delayed(Duration(milliseconds: i * 500), () {
        _controller.showSnackbar(
          BasicSnackbarMessage(
            id: 'download_${files[i]}',
            message: '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è ${files[i]}...',
            type: SnackbarType.loading,
            groupId: 'downloads',
          ),
        );
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
        // Complete download after random time
        Future.delayed(Duration(seconds: 2 + i), () {
          _controller.updateMessage(
            'download_${files[i]}',
            BasicSnackbarMessage(
              id: 'download_${files[i]}_complete',
              message: 'üìÅ ${files[i]} –∑–∞–≥—Ä—É–∂–µ–Ω',
              type: SnackbarType.success,
              groupId: 'downloads',
            ),
          );
        });
      });
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
  /// Shows notification messages.
  void _showNotificationMessages() {
    final notifications = [
      '–£ –≤–∞—Å 3 –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è',
      '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—Å—Ç—Ä–µ—á–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç',
      '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞',
    ];

    for (int i = 0; i < notifications.length; i++) {
      Future.delayed(Duration(milliseconds: i * 300), () {
        _controller.showSnackbar(
          BasicSnackbarMessage(
            id: 'notification_$i',
            message: notifications[i],
            type: SnackbarType.info,
            groupId: 'notifications',
            priority: SnackbarPriority.high,
          ),
        );
      });
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤.
  /// Shows message flood to test limits.
  void _showMessageFlood() {
    for (int i = 0; i < 15; i++) {
      Future.delayed(Duration(milliseconds: i * 100), () {
        _controller.showSnackbar(
          BasicSnackbarMessage(
            id: 'flood_$i',
            message: '–°–æ–æ–±—â–µ–Ω–∏–µ #${i + 1} –∏–∑ –ø–æ—Ç–æ–∫–∞',
            type: SnackbarType.values[i % SnackbarType.values.length],
            priority: SnackbarPriority.values[i % SnackbarPriority.values.length],
          ),
        );
      });
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
  /// Shows progress sequence.
  void _showProgressSequence() {
    final steps = [
      '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...',
      '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...',
      '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...',
      '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...',
      '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...',
      '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...',
    ];

    for (int i = 0; i < steps.length; i++) {
      Future.delayed(Duration(seconds: i), () {
        if (i == steps.length - 1) {
          _controller.showSnackbar(
            BasicSnackbarMessage(
              id: 'progress',
              message: 'üéâ ${steps[i]}',
              type: SnackbarType.success,
            ),
          );
        } else {
          _controller.updateMessage(
            'progress',
            BasicSnackbarMessage(
              id: 'progress',
              message: '‚è≥ ${steps[i]} (${i + 1}/${steps.length})',
              type: SnackbarType.loading,
            ),
          );
        }
      });
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å—Ç–∏–ª–µ–º.
  /// Shows custom styled message.
  void _showCustomStyledMessage() {
    _controller.showSnackbar(
      BasicSnackbarMessage(
        id: _generateMessageId(),
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–æ–π',
        type: SnackbarType.info,
        icon: const Icon(Icons.star, color: Colors.amber),
        duration: const Duration(seconds: 5),
        actions: [
          SnackbarAction(
            label: '‚≠ê –ù—Ä–∞–≤–∏—Ç—Å—è',
            onPressed: () {
              showSuccess(_controller, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!');
            },
            textColor: Colors.amber,
          ),
        ],
      ),
    );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
  /// Shows long message.
  void _showLongMessage() {
    _controller.showSnackbar(
      BasicSnackbarMessage(
        id: _generateMessageId(),
        message: '–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç '
                '–±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã —Ç–µ–∫—Å—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ '
                '–ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–º —Å–æ–±—ã—Ç–∏–∏, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏.',
        type: SnackbarType.warning,
        duration: const Duration(seconds: 8),
        actions: [
          SnackbarAction(
            label: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
            onPressed: () {
              showInfo(_controller, '–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
            },
          ),
        ],
      ),
    );
  }

  /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞.
  /// Tests spam prevention.
  void _testSpamPrevention() {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±—ã—Å—Ç—Ä–æ
    // Try to show the same message multiple times quickly
    for (int i = 0; i < 5; i++) {
      _controller.showSnackbar(
        BasicSnackbarMessage(
          id: 'spam_test',
          message: '–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ - –ø–æ–ø—ã—Ç–∫–∞ #${i + 1}',
          type: SnackbarType.info,
        ),
      );
    }
    
    showInfo(_controller, '–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.');
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–µ–∫–∞.
  /// Returns readable label for stack alignment.
  String _getAlignmentLabel(StackAlignment alignment) {
    return switch (alignment) {
      StackAlignment.topLeft => '–í–µ—Ä—Ö-–õ–µ–≤–æ',
      StackAlignment.topRight => '–í–µ—Ä—Ö-–ü—Ä–∞–≤–æ',
      StackAlignment.bottomLeft => '–ù–∏–∑-–õ–µ–≤–æ',
      StackAlignment.bottomRight => '–ù–∏–∑-–ü—Ä–∞–≤–æ',
    };
  }
}

void main() {
  runApp(const AdvancedExampleApp());
}
