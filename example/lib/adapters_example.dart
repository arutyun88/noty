import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:noty/noty.dart';

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ Noty.
///
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
/// - –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã (NetworkSnackbarAdapter)
/// - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–¥–∞–ø—Ç–µ—Ä—ã
/// - –ù–∞–±–æ—Ä—ã –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
/// - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
///
/// ---
///
/// Example of Noty adapters usage.
///
/// Demonstrates:
/// - Built-in adapters (NetworkSnackbarAdapter)
/// - Custom adapters
/// - Adapter sets
/// - External systems integration
class AdaptersExampleApp extends StatelessWidget {
  const AdaptersExampleApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Noty Adapters Example',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.indigo),
        useMaterial3: true,
      ),
      home: const AdaptersHomePage(),
    );
  }
}

class AdaptersHomePage extends StatefulWidget {
  const AdaptersHomePage({super.key});

  @override
  State<AdaptersHomePage> createState() => _AdaptersHomePageState();
}

class _AdaptersHomePageState extends State<AdaptersHomePage> {
  /// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–Ω—ç–∫–±–∞—Ä–æ–≤.
  /// Snackbar controller.
  late final SnackbarController _controller;

  /// –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã.
  /// Active adapters.
  List<SnackbarAdapter> _adapters = [];

  /// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∞–¥–∞–ø—Ç–µ—Ä–æ–≤.
  /// Counters for adapter demonstration.
  int _notificationCount = 0;
  int _errorCount = 0;
  Timer? _periodicTimer;

  @override
  void initState() {
    super.initState();
    _controller = SnackbarController();
    _setupInitialAdapters();
  }

  @override
  void dispose() {
    _periodicTimer?.cancel();
    _controller.dispose();
    super.dispose();
  }

  /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã.
  /// Sets up initial adapters.
  void _setupInitialAdapters() {
    setState(() {
      _adapters = [
        // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏
        // Built-in network monitoring adapter
        const NetworkSnackbarAdapter(),
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        // Custom notifications adapter
        _createNotificationAdapter(),
        
        // –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫
        // Error monitoring adapter
        _createErrorMonitorAdapter(),
      ];
    });
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
  /// Creates notifications adapter.
  SnackbarAdapter _createNotificationAdapter() {
    return CustomSnackbarAdapter(
      id: 'notification_adapter',
      initialize: (controller) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        // Show notification every 10 seconds
        Timer.periodic(const Duration(seconds: 10), (timer) {
          _notificationCount++;
          
          final notifications = [
            '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üìß',
            '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç ‚è∞',
            '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ üìä',
            '–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –ø–æ—Å—Ç—É üí¨',
            '–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ‚úÖ',
          ];
          
          final message = notifications[_notificationCount % notifications.length];
          
          controller.showSnackbar(
            BasicSnackbarMessage(
              id: 'notification_$_notificationCount',
              message: message,
              type: SnackbarType.info,
              groupId: 'notifications',
              priority: SnackbarPriority.normal,
              actions: [
                SnackbarAction(
                  label: '–ü—Ä–æ—Å–º–æ—Ç—Ä',
                  onPressed: () {
                    controller.showSnackbar(
                      SnackbarMessages.success('–û—Ç–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...'),
                    );
                  },
                ),
              ],
            ),
          );
        });
      },
      dispose: () {
        debugPrint('Notification adapter disposed');
      },
    );
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫.
  /// Creates error monitoring adapter.
  SnackbarAdapter _createErrorMonitorAdapter() {
    return CustomSnackbarAdapter(
      id: 'error_monitor',
      initialize: (controller) {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ—à–∏–±–∫–∏
        // Simulate random errors
        Timer.periodic(const Duration(seconds: 15), (timer) {
          if (Random().nextBool()) {
            _errorCount++;
            
            final errors = [
              '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
              '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞',
              '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ',
              '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
              '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            ];
            
            final error = errors[_errorCount % errors.length];
            
            controller.showSnackbar(
              BasicSnackbarMessage(
                id: 'error_$_errorCount',
                message: '‚ö†Ô∏è $error',
                type: SnackbarType.error,
                priority: SnackbarPriority.high,
                groupId: 'errors',
                actions: [
                  SnackbarAction(
                    label: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
                    onPressed: () {
                      controller.showSnackbar(
                        SnackbarMessages.loading('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...', customId: 'retry_$_errorCount'),
                      );
                      
                      Future.delayed(const Duration(seconds: 2), () {
                        controller.hideSnackbar('retry_$_errorCount');
                        controller.showSnackbar(
                          SnackbarMessages.success('–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!'),
                        );
                      });
                    },
                  ),
                  SnackbarAction(
                    label: '–û—Ç—á–µ—Ç',
                    onPressed: () {
                      controller.showSnackbar(
                        SnackbarMessages.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ...'),
                      );
                    },
                  ),
                ],
              ),
            );
          }
        });
      },
    );
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.
  /// Creates system events adapter.
  SnackbarAdapter _createSystemEventsAdapter() {
    return CustomSnackbarAdapter(
      id: 'system_events',
      initialize: (controller) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        // Show system events
        final events = [
          '–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –≤–µ—Ä—Å–∏–∏ 1.2.3',
          '–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
          '–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
          '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
        ];
        
        for (int i = 0; i < events.length; i++) {
          Future.delayed(Duration(seconds: 5 + i * 3), () {
            controller.showSnackbar(
              BasicSnackbarMessage(
                id: 'system_event_$i',
                message: 'üîß ${events[i]}',
                type: SnackbarType.info,
                groupId: 'system',
                priority: SnackbarPriority.low,
              ),
            );
          });
        }
      },
    );
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
  /// Creates performance monitoring adapter.
  SnackbarAdapter _createPerformanceAdapter() {
    return CustomSnackbarAdapter(
      id: 'performance_monitor',
      initialize: (controller) {
        Timer.periodic(const Duration(seconds: 20), (timer) {
          final memoryUsage = Random().nextInt(100);
          final cpuUsage = Random().nextInt(100);
          
          if (memoryUsage > 80 || cpuUsage > 90) {
            controller.showSnackbar(
              BasicSnackbarMessage(
                id: 'performance_warning',
                message: '‚ö° –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: CPU $cpuUsage%, RAM $memoryUsage%',
                type: SnackbarType.warning,
                priority: SnackbarPriority.high,
                persistent: true,
                actions: [
                  SnackbarAction(
                    label: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å',
                    onPressed: () {
                      controller.showSnackbar(
                        SnackbarMessages.loading('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...', customId: 'optimization'),
                      );
                      
                      Future.delayed(const Duration(seconds: 3), () {
                        controller.hideSnackbar('optimization');
                        controller.showSnackbar(
                          SnackbarMessages.success('–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!'),
                        );
                      });
                    },
                  ),
                ],
              ),
            );
          }
        });
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return SnackbarOverlay(
      controller: _controller,
      adapters: _adapters,
      maxVisibleMessages: 6,
      child: Scaffold(
        appBar: AppBar(
          backgroundColor: Theme.of(context).colorScheme.inversePrimary,
          title: const Text('Noty Adapters Example'),
          actions: [
            IconButton(
              icon: const Icon(Icons.clear_all),
              onPressed: () => _controller.clearAll(),
              tooltip: '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
            ),
          ],
        ),
        body: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –∞–¥–∞–ø—Ç–µ—Ä–∞—Ö
              // Current adapters information
              _buildAdaptersInfoCard(),
              
              const SizedBox(height: 16),
              
              // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏
              // Adapters management
              _buildAdaptersManagementCard(),
              
              const SizedBox(height: 16),
              
              // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã
              // Predefined sets
              _buildAdapterSetsCard(),
              
              const SizedBox(height: 16),
              
              // –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏
              // Manual group management
              _buildGroupManagementCard(),
              
              const SizedBox(height: 16),
              
              // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              // Statistics
              _buildStatisticsCard(),
            ],
          ),
        ),
      ),
    );
  }

  /// –°—Ç—Ä–æ–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–¥–∞–ø—Ç–µ—Ä–∞—Ö.
  /// Builds adapters information card.
  Widget _buildAdaptersInfoCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã (${_adapters.length})',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 12),
            if (_adapters.isEmpty)
              const Text('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤')
            else
              ..._adapters.map((adapter) => Padding(
                padding: const EdgeInsets.only(bottom: 4.0),
                child: Row(
                  children: [
                    const Icon(Icons.extension, size: 16),
                    const SizedBox(width: 8),
                    Expanded(child: Text(adapter.id)),
                    IconButton(
                      icon: const Icon(Icons.close, size: 16),
                      onPressed: () => _removeAdapter(adapter.id),
                      tooltip: '–£–¥–∞–ª–∏—Ç—å –∞–¥–∞–ø—Ç–µ—Ä',
                    ),
                  ],
                ),
              )),
          ],
        ),
      ),
    );
  }

  /// –°—Ç—Ä–æ–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏.
  /// Builds adapters management card.
  Widget _buildAdaptersManagementCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–∞–ø—Ç–µ—Ä—ã',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 12),
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: [
                ElevatedButton(
                  onPressed: () => _addAdapter(_createSystemEventsAdapter()),
                  child: const Text('System Events'),
                ),
                ElevatedButton(
                  onPressed: () => _addAdapter(_createPerformanceAdapter()),
                  child: const Text('Performance Monitor'),
                ),
                ElevatedButton(
                  onPressed: () => _addAdapter(const NetworkSnackbarAdapter()),
                  child: const Text('Network Monitor'),
                ),
                ElevatedButton(
                  onPressed: () => _addCustomTimerAdapter(),
                  child: const Text('Custom Timer'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  /// –°—Ç—Ä–æ–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞–±–æ—Ä–æ–≤ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤.
  /// Builds adapter sets card.
  Widget _buildAdapterSetsCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 12),
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: [
                ElevatedButton(
                  onPressed: () => _loadAdapterSet(SnackbarAdapterSets.basic),
                  child: const Text('Basic Set'),
                ),
                ElevatedButton(
                  onPressed: () => _loadAdapterSet(SnackbarAdapterSets.minimal),
                  child: const Text('Minimal Set'),
                ),
                ElevatedButton(
                  onPressed: () => _loadAdapterSet(SnackbarAdapterSets.custom([
                    const NetworkSnackbarAdapter(),
                    _createNotificationAdapter(),
                  ])),
                  child: const Text('Custom Set'),
                ),
                ElevatedButton(
                  onPressed: () => _clearAllAdapters(),
                  child: const Text('Clear All'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  /// –°—Ç—Ä–æ–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏.
  /// Builds group management card.
  Widget _buildGroupManagementCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 12),
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: [
                ElevatedButton(
                  onPressed: () => _controller.hideGroup('notifications'),
                  child: const Text('Hide Notifications'),
                ),
                ElevatedButton(
                  onPressed: () => _controller.hideGroup('errors'),
                  child: const Text('Hide Errors'),
                ),
                ElevatedButton(
                  onPressed: () => _controller.hideGroup('system'),
                  child: const Text('Hide System'),
                ),
                ElevatedButton(
                  onPressed: () => _controller.clearNonPersistent(),
                  child: const Text('Clear Non-Persistent'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  /// –°—Ç—Ä–æ–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
  /// Builds statistics card.
  Widget _buildStatisticsCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 12),
            ListenableBuilder(
              listenable: _controller,
              builder: (context, child) {
                final messages = _controller.messages;
                final groupedMessages = <String?, List<SnackbarMessage>>{};
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                // Group messages manually for demonstration
                for (final message in messages) {
                  final group = message.groupId;
                  groupedMessages[group] = [...(groupedMessages[group] ?? []), message];
                }
                
                return Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}'),
                    Text('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: $_notificationCount'),
                    Text('–û—à–∏–±–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: $_errorCount'),
                    Text('–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: ${groupedMessages.length}'),
                    const SizedBox(height: 8),
                    if (groupedMessages.isNotEmpty) ...[
                      const Text('–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º:', style: TextStyle(fontWeight: FontWeight.bold)),
                      ...groupedMessages.entries.map((entry) =>
                        Text('  ${entry.key}: ${entry.value.length} —Å–æ–æ–±—â–µ–Ω–∏–π')),
                    ],
                  ],
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  /// –î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä.
  /// Adds adapter.
  void _addAdapter(SnackbarAdapter adapter) {
    if (!_adapters.any((a) => a.id == adapter.id)) {
      setState(() {
        _adapters = [..._adapters, adapter];
      });
      
      _controller.showSnackbar(
        SnackbarMessages.success('–ê–¥–∞–ø—Ç–µ—Ä "${adapter.id}" –¥–æ–±–∞–≤–ª–µ–Ω'),
      );
    } else {
      _controller.showSnackbar(
        SnackbarMessages.warning('–ê–¥–∞–ø—Ç–µ—Ä "${adapter.id}" —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω'),
      );
    }
  }

  /// –£–¥–∞–ª—è–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä.
  /// Removes adapter.
  void _removeAdapter(String adapterId) {
    setState(() {
      _adapters = _adapters.where((a) => a.id != adapterId).toList();
    });
    
    _controller.showSnackbar(
      SnackbarMessages.info('–ê–¥–∞–ø—Ç–µ—Ä "$adapterId" —É–¥–∞–ª–µ–Ω'),
    );
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–±–æ—Ä –∞–¥–∞–ø—Ç–µ—Ä–æ–≤.
  /// Loads adapter set.
  void _loadAdapterSet(List<SnackbarAdapter> adapters) {
    setState(() {
      _adapters = [...adapters];
    });
    
    _controller.showSnackbar(
      SnackbarMessages.success('–ó–∞–≥—Ä—É–∂–µ–Ω –Ω–∞–±–æ—Ä –∏–∑ ${adapters.length} –∞–¥–∞–ø—Ç–µ—Ä–æ–≤'),
    );
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∞–¥–∞–ø—Ç–µ—Ä—ã.
  /// Clears all adapters.
  void _clearAllAdapters() {
    setState(() {
      _adapters = [];
    });
    
    _controller.showSnackbar(
      SnackbarMessages.info('–í—Å–µ –∞–¥–∞–ø—Ç–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã'),
    );
  }

  /// –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–∞–π–º–µ—Ä-–∞–¥–∞–ø—Ç–µ—Ä.
  /// Adds custom timer adapter.
  void _addCustomTimerAdapter() {
    final adapter = CustomSnackbarAdapter(
      id: 'timer_${DateTime.now().millisecondsSinceEpoch}',
      initialize: (controller) {
        int countdown = 5;
        Timer.periodic(const Duration(seconds: 1), (timer) {
          if (countdown > 0) {
            controller.updateMessage(
              'countdown',
              BasicSnackbarMessage(
                id: 'countdown',
                message: '‚è∞ –¢–∞–π–º–µ—Ä: $countdown —Å–µ–∫—É–Ω–¥',
                type: SnackbarType.info,
                persistent: true,
              ),
            );
            countdown--;
          } else {
            timer.cancel();
            controller.hideSnackbar('countdown');
            controller.showSnackbar(
              SnackbarMessages.success('‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!'),
            );
          }
        });
      },
    );
    
    _addAdapter(adapter);
  }
}

void main() {
  runApp(const AdaptersExampleApp());
}
